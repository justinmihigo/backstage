app:
  # Should be the same as backend.baseUrl when using the `app-backend` plugin.
  baseUrl: http://localhost:7007
  title: Scaffolded Backstage App
  extensions:
  - entity-content:kubernetes/kubernetes:
      config:
        filter: kind:component,api,resource,system

organization:
  name: My Backstage

kubernetes:
  frontend:
      podDelete:
        enabled: true
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'config'
      clusters:
        - url: http://127.0.0.1:8001
          name: local
          authProvider: 'serviceAccount'
          skipTLSVerify: true
          skipMetricsLookup: true
          # serviceAccountToken: ${K8S_MINIKUBE_TOKEN}
          # dashboardUrl: http://127.0.0.1:64713 # url copied from running the command: minikube service kubernetes-dashboard -n kubernetes-dashboard
          # dashboardApp: standard
          caData: ${K8S_CONFIG_CA_DATA}
          # caFile: '' # local path to CA file
          # customResources:
          #   - group: 'argoproj.io'
          #     apiVersion: 'v1alpha1'
          #     plural: 'rollouts'
integrations:
  github:
    - host: github.com
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/locations#configuration
      token: ${GITHUB_TOKEN}

backend:
  # Note that the baseUrl should be the URL that the browser and other clients
  # should use when communicating with the backend, i.e. it needs to be
  # reachable not just from within the backend host, but from all of your
  # callers. When its value is "http://localhost:7007", it's strictly private
  # and can't be reached by others.
  baseUrl: http://localhost:7007
  # The listener can also be expressed as a single <host>:<port> string. In this case we bind to
  # all interfaces, the most permissive setting. The right value depends on your specific deployment.
  listen: ':7007'

  # config options: https://node-postgres.com/apis/client
  database:
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
      # https://node-postgres.com/features/ssl
      # you can set the sslmode configuration option via the `PGSSLMODE` environment variable
      # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
      # ssl:
      #   ca: # if you have a CA file and want to verify it you can uncomment this section
      #     $file: <file-path>/ca/server.crt
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  
  reading:
    allow:
      - host: 'demo.backstage.io'
        paths:
          - /api/graphql/schema

techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'local' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.


auth:
  providers:
    development:
          clientId: ${GITHUB_CLIENT_ID}
          clientSecret: ${GITHUB_CLIENT_SECRET}
          signIn:
            resolvers:
              - resolver: usernameMatchingUserEntityName
    guest: {}

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    # Local example data, replace this with your production config, these are intended for demo use only.
    # File locations are relative to the backend process, typically in a deployed context, such as in a Docker container, this will be the root
    - type: file
      target: ./examples/entities.yaml

    # Local example template
    - type: file
      target: ./examples/template/template.yaml
      rules:
        - allow: [Template]

    # Local example organizational data
    - type: file
      target: ./examples/org.yaml
      rules:
        - allow: [User, Group]

    - type: file
      target: ./examples/other-entities.yaml
      
    - type: file
      target: ./examples/slack-notifications.yaml
      rules:
        - allow: [Template]

    - type: url
      target: https://github.com/mclarke47/dice-roller/blob/master/catalog-info.yaml
    
    - type: file
      target: ./examples/template/template-deploy.yaml
      rules:
        - allow: [Template]

  useUrlReadersSearch: true

permission:
  # setting this to `false` will disable permissions
  enabled: true

notifications:
  processors:
    slack:
      - token: ${SLACK_TOKEN}

slack:
  token: ${SLACK_TOKEN}
  webhookUrl: ${WEBHOOK_URL}
  conversationId: C092B8YEPT6
  conversationName: mine