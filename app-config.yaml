app:
  title: Irembo Backstage App
  baseUrl: http://localhost:3000
  extensions:
  - entity-content:kubernetes/kubernetes:
      config:
        filter: kind:component,api,resource,system


organization:
  name: Irembo

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  auth:
    dangerouslyDisableDefaultAuthPolicy: true
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    img-src:
      - ${JIRA_URL}
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  
  reading:
    allow:
      - host: 'demo.backstage.io'
        paths:
          - /api/graphql/schema
      - host: 'github.com'
        paths: 
          - "*"
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    # client: better-sqlite3
    # connection: ':memory:'
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/locations#configuration
      token: ${GITHUB_TOKEN}
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

proxy:
  endpoints:
    '/argocd/api':
      target: ${ARGOCD_SERVER_URL_PROXY}
      changeOrigin: true
      secure: false
      headers:
        Cookie: 
          ${ARGOCD_TOKEN}

    '/prometheus/api':
      target: ${PROMETHEUS_URL_PROXY}
      credentials: dangerously-allow-unauthenticated
      # changeOrigin: true
      # secure: false
      # headers:
      #   Authorization: Basic ${PROMETHEUS_TOKEN}
    '/jira/api':
      target: https://mihigojustin.atlassian.net/
      headers:
        Authorization: ${JIRA_TOKEN_MINE}
        Content-Type: 'application/json'
        Accept: 'application/json'
        X-Atlassian-Token: 'nocheck'
        User-Agent: 'JIRA'
    '/grafana/api':
      target: http://localhost:3001
      headers:
        Authorization: Bearer ${GRAFANA_SA_TOKEN}

    '/newrelic/apm/api':
      target: ${NEW_RELIC_URL_APM}
      headers:
        X-Api-Key: ${NEW_RELIC_USER_KEY}
      allowedHeaders:
        - link
    '/newrelic/api':
      target: ${NEW_RELIC_URL}
      headers:
        X-Api-Key: ${NEW_RELIC_USER_KEY}
    '/pulumi':
      target: 'https://api.pulumi.com/api'
      changeOrigin: true
      headers:
        Authorization: token ${PULUMI_ACCESS_TOKEN}
        Accept: application/vnd.pulumi+8
        Content-Type: application/json
      

  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  providers:
    github:
      development:
        clientId: ${GITHUB_CLIENT_ID}
        clientSecret: ${GITHUB_CLIENT_SECRET}
        signIn:
          resolvers:
            - resolver: usernameMatchingUserEntityName
        # The following is optional, it can be used to restrict the GitHub auth provider to a specific organization
        # organization: my-org
    guest: {}

# scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  providers:
    pulumi:
      default:
        api: https://api.pulumi.com
        organization: justinmihigo
        pulumiAccessToken: ${PULUMI_ACCESS_TOKEN}
        schedule:
          frequency: PT10M
          timeout: PT50M
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location, User, Group]
  locations:
    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: file
      target: ../../examples/entities.yaml
      
    - type: file
      target: ../../examples/other-entities.yaml
      
    - type: file
      target: ../../examples/slack-notifications.yaml
      rules:
        - allow: [Template]

    # Local example template
    - type: file
      target: ../../examples/template/template.yaml
      rules:
        - allow: [Template]
    # - type: url
    #   target: https://github.com/mclarke47/dice-roller/blob/master/catalog-info.yaml
        
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]
    
    - type: file
      target: ../../examples/template/template-deploy.yaml
      rules:
        - allow: [Template]
    - type: file
      target: ../../examples/argocd.yaml
      rules:
        - allow: [Template]
    - type: file 
      target: ../../examples/org1.yaml

    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]
  # Experimental: Always use the search method in UrlReaderProcessor.
  # New adopters are encouraged to enable it as this behavior will be the default in a future release.
  useUrlReadersSearch: true

kubernetes:
  frontend:
      podDelete:
        enabled: true
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'config'
      clusters:
        - url: ${K8S_URL}
          name: cluster.local
          authProvider: 'serviceAccount'
          skipTLSVerify: true
          skipMetricsLookup: true
          serviceAccountToken: ${K8S_SERVICE_ACCOUNT_TOKEN}
          # dashboardUrl: http://127.0.0.1:64713 # url copied from running the command: minikube service kubernetes-dashboard -n kubernetes-dashboard
          # dashboardApp: standard
          caData: ${K8S_CONFIG_CA_DATA}
          # caFile: '' # local path to CA file
          # customResources:
          #   - group: 'argoproj.io'
          #     apiVersion: 'v1alpha1'
          #     plural: 'rollouts'
       
  # see https://backstage.io/docs/features/kubernetes/configuration for kubernetes configuration options

# see https://backstage.io/docs/permissions/getting-started for more on the permission framework
permission:
  # setting this to `false` will disable permissions
  enabled: true

notifications:
  processors:
    slack:
      - token: ${SLACK_TOKEN}
#         webhookUrl: ${WEBHOOK_URL}
#         conversationId: C092B8YEPT6
#         conversationName: mine
        # broadcastChannels: # Optional, if you wish to support broadcast notifications.
        #   - C092B8YEPT6

slack:
  token: ${SLACK_TOKEN}
  webhookUrl: ${WEBHOOK_URL}
  conversationId: C092B8YEPT6
  conversationName: mine

notificationsTester:
  enabled: true

argocd:
  username: ${ARGOCD_USERNAME}
  password: ${ARGOCD_PASSWORD}
  appLocatorMethods:
    - type: 'config'
      instances:
        - name: argocd-server
          secure: false
          url: ${ARGOCD_SERVER_URL}
          token: ${ARGOCD_AUTH_TOKEN}

# prometheus:
#   proxyPath: /prometheus/api
#   uiUrl: 'http://localhost:9090'
#   instances:
#     - name: prometheus
#       proxyPath: /prometheus/api
#       uiUrl: 'http://localhost:9090'

ai:
  #(Optional) Supported sources to query information from using RAG. This can be used to omit unnecessary sources from being retrievable. Defaults to [catalog]
  supportedSources: ['catalog','tech-docs','api']
  prompts:
    # (Optional) Prefix prompt to add to the query. This prompt is always succeeded by a text blob of embeddings retrieved by the RAG engine.
    prefix: 'you are an LLM designed to do this and that... based on... Use the following documents to...'

    # Suffix prompt to add to the query. This prompt is always succeeded by text query user has input.
    suffix: 'Begin! \n Question: \n'
  storage:
    pgvector:
      # (Optional) The size of the chunk to flush when storing embeddings to the DB. Defaults to 500
      chunksize: 500

  # Embeddings engine configuration options
  embeddings:
    # Generic embeddings options
    # (Optional) The chunk size of an embedding. Determines how big or small the individual pieces of context stored alongside the vectors and sent to the LLM are. Defaults to 1000
    chunkSize: 1000

    # (Optional) The overlap between adjacent chunks of embeddings. The bigger the number, the more overlap. Defaults to 200
    chunkOverlap: 200
    concurrencyLimit: 10
    openai:
      # baseURL: 'https://generativelanguage.googleapis.com/v1beta/'
      modelName: 'text-embedding-3-small'
      batchSize: 512
      embeddingsDimensions: 1536
      # apiKey: 'AIzaSyBt9_oD7eeKd46xKOmetEjUZbYZLzmSNGU'
      openAIApiKey: ${OPENAI_API_KEY}

ragAi:
  index:
    enabled: true
    schedule: "0 * * * *"

grafana: 
  domain: ${GRAFANA_URL}